package harness

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/fs"
	"os"
	"text/template"

	"github.com/aleksa11010/harness-api-wrapper/templates"
)

// Generated by https://quicktype.io

type Organizations struct {
	Status        string            `json:"status"`
	Data          OrganizationsData `json:"data"`
	MetaData      interface{}       `json:"metaData"`
	CorrelationID string            `json:"correlationId"`
}

type OrganizationsData struct {
	TotalPages    int64                  `json:"totalPages"`
	TotalItems    int64                  `json:"totalItems"`
	PageItemCount int64                  `json:"pageItemCount"`
	PageSize      int64                  `json:"pageSize"`
	Content       []OrganizationsContent `json:"content"`
	PageIndex     int64                  `json:"pageIndex"`
	Empty         bool                   `json:"empty"`
	PageToken     interface{}            `json:"pageToken"`
}

type OrganizationsContent struct {
	Organization   Organization `json:"organization"`
	CreatedAt      int64        `json:"createdAt"`
	LastModifiedAt int64        `json:"lastModifiedAt"`
	HarnessManaged bool         `json:"harnessManaged"`
}

type Organization struct {
	Identifier  string            `json:"identifier"`
	Name        string            `json:"name"`
	Description string            `json:"description"`
	Tags        OrganizationsTags `json:"tags"`
}

type OrganizationsTags struct {
}

type OrganizationsAPI interface {
	GetAllOrganizations(format string, account string) (Entities, error)
}

func (o Organizations) FormatOrganizations() error {

	content := make([]json.RawMessage, 0)
	for _, con := range o.Data.Content {
		c, err := json.Marshal(con)
		if err != nil {
			fmt.Printf("error marshalling user group: %s", err)
		}
		content = append(content, json.RawMessage(c))
	}

	reportData, err := json.Marshal(content)
	if err != nil {
		fmt.Println("Unable to marshal json", err)
		return err
	}
	err = createOrganizationsReport(reportData)
	if err != nil {
		fmt.Println("Unable to create a HTML output :", err)
		return err
	}
	return nil
}

func createOrganizationsReport(content []byte) error {
	type ReportData struct {
		Header  string
		Content string
	}

	reportData := ReportData{
		Header:  "Organizations",
		Content: string(content),
	}

	rgTemplate, err := fs.ReadFile(templates.EmbeddedFiles, "report.html")
	if err != nil {
		fmt.Printf("error reading template: %s", err)
	}

	t, err := template.New("organizations").Parse(string(rgTemplate))
	if err != nil {
		fmt.Printf("error parsing template: %s", err)
		return err
	}

	var output bytes.Buffer
	err = t.Execute(&output, reportData)
	if err != nil {
		fmt.Println(err)
		return err
	}

	file, err := os.OpenFile("./report/data/organizations.html", os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	_, err = file.Write(output.Bytes())
	if err != nil {
		panic(err)
	}

	return nil
}
