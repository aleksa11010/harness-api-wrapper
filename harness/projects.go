package harness

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/fs"
	"os"
	"text/template"

	"github.com/aleksa11010/harness-api-wrapper/templates"
)

// Generated by https://quicktype.io

type Projects struct {
	Status        string       `json:"status"`
	Data          ProjectsData `json:"data"`
	MetaData      interface{}  `json:"metaData"`
	CorrelationID string       `json:"correlationId"`
}

type ProjectsData struct {
	TotalPages    int64             `json:"totalPages"`
	TotalItems    int64             `json:"totalItems"`
	PageItemCount int64             `json:"pageItemCount"`
	PageSize      int64             `json:"pageSize"`
	Content       []ProjectsContent `json:"content"`
	PageIndex     int64             `json:"pageIndex"`
	Empty         bool              `json:"empty"`
	PageToken     interface{}       `json:"pageToken"`
}

type ProjectsContent struct {
	Project        Project `json:"project"`
	CreatedAt      *int64  `json:"createdAt"`
	LastModifiedAt int64   `json:"lastModifiedAt"`
}

type Project struct {
	OrgIdentifier OrgIdentifier    `json:"orgIdentifier"`
	Identifier    string           `json:"identifier"`
	Name          string           `json:"name"`
	Color         string           `json:"color"`
	Modules       []ProjectsModule `json:"modules"`
	Description   string           `json:"description"`
	Tags          ProjectsTags     `json:"tags"`
}

type ProjectsTags struct {
	Owner                  *string `json:"owner,omitempty"`
	FinOps                 *string `json:"FinOps,omitempty"`
	SRMStandalone          *string `json:"SRM Standalone,omitempty"`
	SloSLI                 *string `json:"SLO/SLI,omitempty"`
	ErrorTracking          *string `json:"Error Tracking,omitempty"`
	DeploymentVerification *string `json:"Deployment Verification,omitempty"`
	ServiceHealth          *string `json:"Service Health,omitempty"`
}

type ProjectsModule string

type OrgIdentifier string

type ProjectsAPI interface {
	GetAllProjects(format string, account string) (Entities, error)
}

func (p Projects) FormatProjects() error {

	content := make([]json.RawMessage, 0)
	for _, con := range p.Data.Content {
		c, err := json.Marshal(con)
		if err != nil {
			fmt.Printf("error marshalling user group: %s", err)
		}
		content = append(content, json.RawMessage(c))
	}

	reportData, err := json.Marshal(content)
	if err != nil {
		fmt.Println("Unable to marshal json", err)
		return err
	}
	err = createProjectsReport(reportData)
	if err != nil {
		fmt.Println("Unable to create a HTML output :", err)
		return err
	}
	return nil
}

func createProjectsReport(content []byte) error {
	type ReportData struct {
		Header  string
		Content string
	}

	reportData := ReportData{
		Header:  "Projects",
		Content: string(content),
	}

	rgTemplate, err := fs.ReadFile(templates.EmbeddedFiles, "report.html")
	if err != nil {
		fmt.Printf("error reading template: %s", err)
	}

	t, err := template.New("connectors").Parse(string(rgTemplate))
	if err != nil {
		fmt.Printf("error parsing template: %s", err)
		return err
	}

	var output bytes.Buffer
	err = t.Execute(&output, reportData)
	if err != nil {
		fmt.Println(err)
		return err
	}

	file, err := os.OpenFile("./report/data/projects.html", os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	_, err = file.Write(output.Bytes())
	if err != nil {
		panic(err)
	}

	return nil
}
