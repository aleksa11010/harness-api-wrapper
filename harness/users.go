package harness

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/fs"
	"os"
	"text/template"

	"github.com/aleksa11010/harness-api-wrapper/templates"
)

// Generated by https://quicktype.io

type Users struct {
	Status        string      `json:"status"`
	Data          UsersData   `json:"data"`
	MetaData      interface{} `json:"metaData"`
	CorrelationID string      `json:"correlationId"`
}

type UsersData struct {
	TotalPages    int64          `json:"totalPages"`
	TotalItems    int64          `json:"totalItems"`
	PageItemCount int64          `json:"pageItemCount"`
	PageSize      int64          `json:"pageSize"`
	Content       []UsersContent `json:"content"`
	PageIndex     int64          `json:"pageIndex"`
	Empty         bool           `json:"empty"`
	PageToken     interface{}    `json:"pageToken"`
}

type UsersContent struct {
	Name                           string `json:"name"`
	Email                          string `json:"email"`
	UUID                           string `json:"uuid"`
	Locked                         bool   `json:"locked"`
	Disabled                       bool   `json:"disabled"`
	ExternallyManaged              bool   `json:"externallyManaged"`
	TwoFactorAuthenticationEnabled bool   `json:"twoFactorAuthenticationEnabled"`
}

type UserAPI interface {
	GetAllUsers(format string, account string) (Entities, error)
}

func (u Users) FormatUsers() error {

	content := make([]json.RawMessage, 0)
	for _, user := range u.Data.Content {
		u, err := json.Marshal(user)
		if err != nil {
			fmt.Printf("error marshalling user group: %s", err)
		}
		content = append(content, json.RawMessage(u))
	}

	reportData, err := json.Marshal(content)
	if err != nil {
		fmt.Println("Unable to marshal json", err)
		return err
	}
	err = createUsersReport(reportData)
	if err != nil {
		fmt.Println("Unable to create a HTML output :", err)
		return err
	}
	return nil
}

func createUsersReport(content []byte) error {
	type ReportData struct {
		Header  string
		Content string
	}

	reportData := ReportData{
		Header:  "Users",
		Content: string(content),
	}

	usersTemplate, err := fs.ReadFile(templates.EmbeddedFiles, "report.html")
	if err != nil {
		fmt.Printf("error reading template: %s", err)
	}

	t, err := template.New("users").Parse(string(usersTemplate))
	if err != nil {
		fmt.Printf("error parsing template: %s", err)
		return err
	}

	var output bytes.Buffer
	err = t.Execute(&output, reportData)
	if err != nil {
		fmt.Println(err)
		return err
	}

	file, err := os.OpenFile("./report/data/users.html", os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	_, err = file.Write(output.Bytes())
	if err != nil {
		panic(err)
	}

	return nil
}
