package harness

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/fs"
	"os"
	"text/template"

	"github.com/aleksa11010/harness-api-wrapper/templates"
)

// Generated by https://quicktype.io

type ResourceGroups struct {
	Status        string             `json:"status"`
	Data          ResourceGroupsData `json:"data"`
	MetaData      interface{}        `json:"metaData"`
	CorrelationID string             `json:"correlationId"`
}

type ResourceGroupsData struct {
	TotalPages    int64                   `json:"totalPages"`
	TotalItems    int64                   `json:"totalItems"`
	PageItemCount int64                   `json:"pageItemCount"`
	PageSize      int64                   `json:"pageSize"`
	Content       []ResourceGroupsContent `json:"content"`
	PageIndex     int64                   `json:"pageIndex"`
	Empty         bool                    `json:"empty"`
	PageToken     interface{}             `json:"pageToken"`
}

type ResourceGroupsContent struct {
	ResourceGroup  ResourceGroup `json:"resourceGroup"`
	CreatedAt      int64         `json:"createdAt"`
	LastModifiedAt int64         `json:"lastModifiedAt"`
	HarnessManaged bool          `json:"harnessManaged"`
}

type ResourceGroup struct {
	Identifier         string                            `json:"identifier"`
	Name               string                            `json:"name"`
	Color              string                            `json:"color"`
	Tags               interface{}                       `json:"tags"`
	Description        string                            `json:"description"`
	AllowedScopeLevels []ResourceGroupsAllowedScopeLevel `json:"allowedScopeLevels"`
	IncludedScopes     []ResourceGroupsIncludedScope     `json:"includedScopes"`
	ResourceFilter     ResourceGroupsResourceFilter      `json:"resourceFilter"`
	AccountIdentifier  *RolesAccountIdentifier           `json:"accountIdentifier,omitempty"`
}

type ResourceGroupsIncludedScope struct {
	Filter            ResourceGroupsFilter    `json:"filter"`
	AccountIdentifier *RolesAccountIdentifier `json:"accountIdentifier,omitempty"`
	OrgIdentifier     *string                 `json:"orgIdentifier,omitempty"`
}

type ResourceGroupsResourceFilter struct {
	Resources           []ResourceGroupsResource `json:"resources"`
	IncludeAllResources bool                     `json:"includeAllResources"`
}

type ResourceGroupsResource struct {
	ResourceType    string                         `json:"resourceType"`
	Identifiers     []string                       `json:"identifiers"`
	AttributeFilter *ResourceGroupsAttributeFilter `json:"attributeFilter,omitempty"`
}

type ResourceGroupsAttributeFilter struct {
	AttributeName   string   `json:"attributeName"`
	AttributeValues []string `json:"attributeValues"`
}

type ResourceGroupsAccountIdentifier string

type ResourceGroupsAllowedScopeLevel string

const (
	ResourceGroupsAccount      ResourceGroupsAllowedScopeLevel = "account"
	ResourceGroupsOrganization ResourceGroupsAllowedScopeLevel = "organization"
)

type ResourceGroupsFilter string

const (
	ResourceGroupsExcludingChildScopes ResourceGroupsFilter = "EXCLUDING_CHILD_SCOPES"
	ResourceGroupsIncludingChildScopes ResourceGroupsFilter = "INCLUDING_CHILD_SCOPES"
)

type ResourceGroupsAPI interface {
	GetAllResourceGroups(format string, account string) (Entities, error)
}

func (rg ResourceGroups) FormatResourceGroups() error {

	content := make([]json.RawMessage, 0)
	for _, resource := range rg.Data.Content {
		r, err := json.Marshal(resource)
		if err != nil {
			fmt.Printf("error marshalling user group: %s", err)
		}
		content = append(content, json.RawMessage(r))
	}

	reportData, err := json.Marshal(content)
	if err != nil {
		fmt.Println("Unable to marshal json", err)
		return err
	}
	err = createResourceGroupsReport(reportData)
	if err != nil {
		fmt.Println("Unable to create a HTML output :", err)
		return err
	}
	return nil
}

func createResourceGroupsReport(content []byte) error {
	type ReportData struct {
		Header  string
		Content string
	}

	reportData := ReportData{
		Header:  "Resource Groups",
		Content: string(content),
	}

	rgTemplate, err := fs.ReadFile(templates.EmbeddedFiles, "report.html")
	if err != nil {
		fmt.Printf("error reading template: %s", err)
	}

	t, err := template.New("resourcegroups").Parse(string(rgTemplate))
	if err != nil {
		fmt.Printf("error parsing template: %s", err)
		return err
	}

	var output bytes.Buffer
	err = t.Execute(&output, reportData)
	if err != nil {
		fmt.Println(err)
		return err
	}

	file, err := os.OpenFile("./report/data/resourcegroups.html", os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	_, err = file.Write(output.Bytes())
	if err != nil {
		panic(err)
	}

	return nil
}
